{"version":3,"sources":["components/Header.jsx","components/TextInput.jsx","components/CheckboxInput.jsx","components/SelectInput.jsx","components/SearchBar.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/AreaInput.jsx","components/NumberInput.jsx","components/AddMovie.jsx","components/MovieLibrary.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","TextInput","this","props","name","value","onChange","text","testid","htmlFor","data-testid","type","id","CheckboxInput","checked","SelectInput","options","map","option","key","SearchBar","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","selectedGenre","onSelectedGenreChange","Rating","rating","parseFloat","toFixed","MovieCard","movie","title","subtitle","storyline","imagePath","alt","src","MovieList","movies","AreaInput","cols","rows","NumberInput","max","min","step","inputs","AddMovie","state","genre","handleChange","bind","onClick","target","setState","MovieLibrary","handleMoviePush","moviesFiltered","reduce","acc","cur","toLowerCase","includes","push","filter","bookmarked","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35146b71.chunk.js","sourcesContent":["import React from 'react';\n\nimport '../styles/header.css';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TextInput extends React.Component {\n  render() {\n    const { name, value, onChange, text, testid } = this.props;\n    return (\n      <div>\n        <label htmlFor={ name } data-testid={ `${testid}-input-label` }>\n          { text }\n        </label>\n        <input\n          type=\"text\"\n          data-testid={ `${testid}-input` }\n          name={ name }\n          id={ name }\n          value={ value }\n          onChange={ onChange }\n        />\n      </div>\n    );\n  }\n}\n\nTextInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n  testid: PropTypes.string.isRequired,\n};\n\nexport default TextInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass CheckboxInput extends React.Component {\n  render() {\n    const { name, checked, onChange, text } = this.props;\n    return (\n      <label htmlFor={ name } data-testid=\"checkbox-input-label\">\n        { text }\n        <input\n          type=\"checkbox\"\n          data-testid=\"checkbox-input\"\n          name={ name }\n          id={ name }\n          checked={ checked }\n          onChange={ onChange }\n        />\n      </label>\n    );\n  }\n}\n\nCheckboxInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  checked: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default CheckboxInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SelectInput extends React.Component {\n  render() {\n    const { name, value, onChange, text, options, testid } = this.props;\n    return (\n      <label htmlFor={ name } data-testid={ `${testid}-input-label` }>\n        { text }\n        <select\n          data-testid={ `${testid}-input` }\n          name={ name }\n          id={ name }\n          value={ value }\n          onChange={ onChange }\n        >\n          { options.map((option) => (\n            <option\n              data-testid={ `${testid}-option` }\n              value={ option.value }\n              key={ option.text }\n            >\n              { option.text }\n            </option>))}\n        </select>\n      </label>\n    );\n  }\n}\n\nSelectInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n  testid: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(PropTypes.shape(\n    { value: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n    },\n  )).isRequired,\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from './TextInput';\nimport CheckboxInput from './CheckboxInput';\nimport SelectInput from './SelectInput';\n\nimport '../styles/searchbar.css';\n\nclass SearchBar extends React.Component {\n  render() {\n    const {\n      searchText,\n      onSearchTextChange,\n      bookmarkedOnly,\n      onBookmarkedChange,\n      selectedGenre,\n      onSelectedGenreChange,\n    } = this.props;\n\n    const options = [\n      { value: '', text: 'Todos' },\n      { value: 'action', text: 'Ação' },\n      { value: 'comedy', text: 'Comédia' },\n      { value: 'thriller', text: 'Suspense' },\n    ];\n\n    return (\n      <form data-testid=\"search-bar-form\" className=\"search-bar\">\n        <h2>Pesquisar filme</h2>\n        <TextInput\n          text=\"Inclui o texto \"\n          name=\"searchText\"\n          testid=\"text\"\n          value={ searchText }\n          onChange={ onSearchTextChange }\n        />\n        <div>\n          <CheckboxInput\n            text=\"Mostrar somente favoritos \"\n            name=\"bookmarkedOnly\"\n            checked={ bookmarkedOnly }\n            onChange={ onBookmarkedChange }\n          />\n          <SelectInput\n            text=\"Filtrar por gênero \"\n            name=\"selectedGenre\"\n            testid=\"select\"\n            value={ selectedGenre }\n            onChange={ onSelectedGenreChange }\n            options={ options }\n          />\n        </div>\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../styles/rating.css';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{ parseFloat(rating).toFixed(1) }</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = {\n  rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nimport '../styles/moviecard.css';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={ rating } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MovieCard from './MovieCard';\n\nimport '../styles/movielist.css';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      subtitle: PropTypes.string.isRequired,\n      storyline: PropTypes.string.isRequired,\n      rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n      imagePath: PropTypes.string.isRequired,\n      bookmarked: PropTypes.bool,\n      genre: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AreaInput extends React.Component {\n  render() {\n    const { name, value, onChange, text, testid } = this.props;\n    return (\n      <label htmlFor={ name } data-testid={ `${testid}-input-label` }>\n        { text }\n        <textarea\n          type=\"text\"\n          data-testid={ `${testid}-input` }\n          name={ name }\n          id={ name }\n          value={ value }\n          onChange={ onChange }\n          cols=\"30\"\n          rows=\"10\"\n        />\n      </label>\n    );\n  }\n}\n\nAreaInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n  testid: PropTypes.string.isRequired,\n};\n\nexport default AreaInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass NumberInput extends React.Component {\n  render() {\n    const { name, value, onChange, text, testid } = this.props;\n    return (\n      <label htmlFor={ name } data-testid={ `${testid}-input-label` }>\n        { text }\n        <input\n          type=\"number\"\n          max=\"5\"\n          min=\"0\"\n          step=\"0.1\"\n          data-testid={ `${testid}-input` }\n          name={ name }\n          id={ name }\n          value={ value }\n          onChange={ onChange }\n        />\n      </label>\n    );\n  }\n}\n\nNumberInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  onChange: PropTypes.func.isRequired,\n  text: PropTypes.string.isRequired,\n  testid: PropTypes.string.isRequired,\n};\n\nexport default NumberInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from './TextInput';\nimport AreaInput from './AreaInput';\nimport NumberInput from './NumberInput';\nimport SelectInput from './SelectInput';\n\nimport '../styles/addmovie.css';\n\nconst inputs = [\n  {\n    text: 'Título ',\n    name: 'title',\n    testid: 'title',\n    value: 'title',\n  },\n  {\n    text: 'Subtítulo ',\n    name: 'subtitle',\n    testid: 'subtitle',\n    value: 'subtitle',\n  },\n  {\n    text: 'Imagem (URL)',\n    name: 'imagePath',\n    testid: 'image',\n    value: 'imagePath',\n  },\n];\n\nconst options = [\n  { value: 'action', text: 'Ação' },\n  { value: 'comedy', text: 'Comédia' },\n  { value: 'thriller', text: 'Suspense' },\n];\n\nclass AddMovie extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  onClick() {\n    const { onClick } = this.props;\n\n    onClick(this.state);\n\n    this.setState({\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    });\n  }\n\n  render() {\n    const { storyline, rating, genre } = this.state;\n\n    return (\n      <form data-testid=\"add-movie-form\" className=\"add-movie\">\n        <h2>Adicionar filme</h2>\n        { inputs.map(({ text, name, testid, value }) => {\n          const { state } = this;\n          return (\n            (<TextInput\n              text={ text }\n              name={ name }\n              testid={ testid }\n              value={ state[value] }\n              key={ name }\n              onChange={ this.handleChange }\n            />));\n        })}\n\n        <AreaInput\n          text=\"Sinopse \"\n          name=\"storyline\"\n          testid=\"storyline\"\n          value={ storyline }\n          onChange={ this.handleChange }\n        />\n        <NumberInput\n          text=\"Avaliação \"\n          name=\"rating\"\n          testid=\"rating\"\n          value={ rating }\n          onChange={ this.handleChange }\n        />\n        <SelectInput\n          text=\"Gênero \"\n          name=\"genre\"\n          testid=\"genre\"\n          value={ genre }\n          onChange={ this.handleChange }\n          options={ options }\n        />\n        <button type=\"button\" data-testid=\"send-button\" onClick={ this.onClick }>\n          Adicionar filme\n        </button>\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default AddMovie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SearchBar from './SearchBar';\nimport MovieList from './MovieList';\nimport AddMovie from './AddMovie';\n\nclass MovieLibrary extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { movies } = this.props;\n\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleMoviePush = this.handleMoviePush.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name } = target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleMoviePush(movie) {\n    const { movies } = this.state;\n    this.setState({\n      movies: [...movies, movie],\n    });\n  }\n\n  render() {\n    const { searchText, bookmarkedOnly, selectedGenre, movies } = this.state;\n    const moviesFiltered = movies.reduce((acc, cur) => {\n      const { title, subtitle, storyline } = cur;\n\n      if (title.toLowerCase().includes(searchText.toLowerCase())\n        || subtitle.toLowerCase().includes(searchText.toLowerCase())\n        || storyline.toLowerCase().includes(searchText.toLowerCase())) {\n        acc.push(cur);\n      }\n\n      if (bookmarkedOnly) {\n        acc = acc.filter(({ bookmarked }) => bookmarked);\n      }\n\n      if (selectedGenre !== '') {\n        acc = acc.filter(({ genre }) => genre === selectedGenre);\n      }\n\n      return acc;\n    }, []);\n\n    return (\n      <main>\n        <SearchBar\n          searchText={ searchText }\n          onSearchTextChange={ this.handleChange }\n          bookmarkedOnly={ bookmarkedOnly }\n          onBookmarkedChange={ this.handleChange }\n          selectedGenre={ selectedGenre }\n          onSelectedGenreChange={ this.handleChange }\n        />\n        <MovieList\n          movies={ moviesFiltered }\n        />\n        <AddMovie onClick={ this.handleMoviePush } />\n      </main>\n    );\n  }\n}\n\nMovieLibrary.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      subtitle: PropTypes.string.isRequired,\n      storyline: PropTypes.string.isRequired,\n      rating: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n      imagePath: PropTypes.string.isRequired,\n      bookmarked: PropTypes.bool.isRequired,\n      genre: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default MovieLibrary;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport Header from './components/Header';\nimport MovieLibrary from './components/MovieLibrary';\n\nimport movies from './data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={ movies } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}